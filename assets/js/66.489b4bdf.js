(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{490:function(t,v,e){"use strict";e.r(v);var _=e(65),i=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git体系整理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git体系整理"}},[t._v("#")]),t._v(" Git体系整理")]),t._v(" "),e("h2",{attrs:{id:"基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),e("h3",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("p",[e("code",[t._v("git")]),t._v(" 是一个 "),e("code",[t._v("分布式版本管理系统")]),t._v(" ，是为了更好地管理Linux内核开发而创立的。")]),t._v(" "),e("p",[t._v("其 "),e("code",[t._v("版本记录数据库")]),t._v(" 在本地和远程服务器都有保存，因此没网时你依旧可正常的进行操作（除了推送到远程仓库之类的操作不行外）：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516130554.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"本地操作-单人开发-不涉及远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地操作-单人开发-不涉及远程仓库"}},[t._v("#")]),t._v(" 本地操作 - 单人开发，不涉及远程仓库")]),t._v(" "),e("p",[t._v("所以，让我们来完成一个将普通文件夹变成纳入 "),e("code",[t._v("git")]),t._v(" 管理的项目的完整流程：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("初始化版本库：将 一个目录初始化为"),e("code",[t._v("git")]),t._v("管理的版本库 - "),e("code",[t._v("git init")]),t._v("，这时候，你可以看到"),e("code",[t._v(".git")]),t._v("隐藏文件夹")])]),t._v(" "),e("li",[e("p",[t._v("然后，我们可用"),e("code",[t._v("git config -l")]),t._v("来查看"),e("code",[t._v("git")]),t._v("管理的相关配置")])]),t._v(" "),e("li",[e("p",[t._v("新项目的话，我们需要先配置下 名称 和 联系邮箱："),e("code",[t._v('git config user.name "幻生"')]),t._v("、"),e("code",[t._v('git config user.email "2933903535@qq.com"')]),t._v("，这样的话，别人可以看见是谁提交的代码便于联系以及追踪。")])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意： "),e("code",[t._v("git config")]),t._v(" 会显示有 "),e("code",[t._v("config")]),t._v(" 配置有哪些指令可用，通过 "),e("code",[t._v("git config --unset 配置属性")]),t._v(" 可以删除某个属性")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[t._v("接着我们需要了解一个概念："),e("code",[t._v("git")]),t._v("管理体系里有 "),e("code",[t._v("工作区WorkingTree")]),t._v(" 和 "),e("code",[t._v("版本库")]),t._v(" 两个概念，"),e("code",[t._v("工作区")]),t._v("就是初始化的项目目录，而 "),e("code",[t._v("版本库")]),t._v(" 是已经纳入到"),e("code",[t._v("git")]),t._v("版本管理 里的资料，其又分为 "),e("code",[t._v("暂存区index/Cache")]),t._v("、"),e("code",[t._v("仓库Repository")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("通过 "),e("code",[t._v("git status")]),t._v("我们可查看当前 "),e("code",[t._v("git")]),t._v("工作区内的文件状态，"),e("code",[t._v("Untracked files")]),t._v("标识的是 工作区内还未纳入版本库的文件列表："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516131522.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("通过"),e("code",[t._v("git add .")]),t._v("可以将当前目录下的所有文件加入到 "),e("code",[t._v("暂存区")]),t._v("："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516131748.png",alt:""}})])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：如果是想确保本 "),e("code",[t._v("工作区")]),t._v(" 的所有变更都加入到暂存区，需要使用 "),e("code",[t._v("git add -A")]),t._v(" ，因为 "),e("code",[t._v("git add .")]),t._v(" 只是将当前终端目录及以内的变更加入追踪。")])]),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[e("p",[t._v("通过"),e("code",[t._v("git commit -m '提交到本地仓库的本次提交说明'")]),t._v("来提交到本地仓库，此时的工作区会很干净："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516131936.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("如果我们修改了一下之前已经提交的文件，你可以看见相关提示：")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516132800.png",alt:""}}),t._v("， "),e("code",[t._v("git")]),t._v(" 的好处体现出来了，我们可以明确地看到什么文件被修改了，且通过 "),e("code",[t._v("git diff 某个文件路径")]),t._v(" 来查看最近一次该文件的修改内容："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516133025.png",alt:""}})]),t._v(" "),e("ol",{attrs:{start:"9"}},[e("li",[t._v("通过"),e("code",[t._v("git log 要查看的文件")]),t._v("可查看追溯是由谁在什么时候提交的修改记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516142405.png",alt:""}})])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("git log")]),t._v(" 可查看本项目的提交修改记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516142439.png",alt:""}})])]),t._v(" "),e("p",[t._v("此外，我们还可以通过 "),e("code",[t._v("git reflog")]),t._v(" 来查看提交记录的简要信息："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516142742.png",alt:""}})]),t._v(" "),e("ol",{attrs:{start:"10"}},[e("li",[t._v("如果我们想要舍弃最近的全部修改，重置到上一次提交记录，可以这样做："),e("code",[t._v("git reset --hard HEAD^")]),t._v("：")])]),t._v(" "),e("ul",[e("li",[t._v("当前提交记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516150350.png",alt:""}})]),t._v(" "),e("li",[t._v("回退到上一次提交记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516151026.png",alt:""}})]),t._v(" "),e("li",[e("code",[t._v("git reset --hard HEAD^")]),t._v("意思是 指向上一次记录，等同与 "),e("code",[t._v("git reset --hard HEAD~1")])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意，除了 "),e("code",[t._v("--hard")]),t._v(" 外，还有 "),e("code",[t._v("--soft")]),t._v(" 模式和 "),e("code",[t._v("--mixed")]),t._v(" 模式， "),e("code",[t._v("--soft")]),t._v(" 模式是 "),e("code",[t._v("HEAD指针")]),t._v(" 指向某一个次，但硬盘数据不变，啥意思呢？就是 "),e("code",[t._v("log")]),t._v(" 的 "),e("code",[t._v("commit")]),t._v(" 记录跳回某一次，但文件数据不变，等于你将 "),e("code",[t._v("git commit -m")]),t._v(" 这个添加到仓库的操作撤回，但是 "),e("code",[t._v("已修改的文件")]),t._v(" 和 "),e("code",[t._v("git add .")]),t._v(" 不变，所以你通过 "),e("code",[t._v("git status")]),t._v(" 和打开更改的文件发现没啥变化； "),e("code",[t._v("--mixed")]),t._v(" 是默认模式，其更进一步，等于将 "),e("code",[t._v("git add .")]),t._v(" 操作也撤回，直接回到了 工作区最开始的情况，这两种可用于 修改合并 "),e("code",[t._v("commit")]),t._v(" 记录的情况，而 "),e("code",[t._v("--hard")]),t._v(" 则更像是 舍弃操作。")])]),t._v(" "),e("ol",{attrs:{start:"11"}},[e("li",[e("p",[t._v("如果要恢复之前重置的内容，可以通过"),e("code",[t._v("git reset --hard hash标识")]),t._v("来跳回某一个提交记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516151429.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("开发中，我们总会有些文件不想要纳入版本管理，但是在本地又确实有用，比如："),e("code",[t._v("配置文件")]),t._v("、"),e("code",[t._v("临时文件")]),t._v("、"),e("code",[t._v("本地测试文件")]),t._v("、"),e("code",[t._v("依赖文件")]),t._v("等，这时候我们可以给相关文件添加忽略配置：")])])]),t._v(" "),e("ul",[e("li",[t._v("通过"),e("code",[t._v("touch .gitignore")]),t._v("创建"),e("code",[t._v("git")]),t._v("的忽略配置文件")]),t._v(" "),e("li",[t._v("为了模拟我们需要忽略的文件，我手动创建了个"),e("code",[t._v("nodemodules")]),t._v("目录和"),e("code",[t._v("配置文件.env")]),t._v("文件，这时通过"),e("code",[t._v("git status")]),t._v("查看会发现，其算在了工作空间 内："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516152802.png",alt:""}})]),t._v(" "),e("li",[t._v("配置"),e("code",[t._v(".gitignore")]),t._v("文件，将"),e("code",[t._v("nodemodules")]),t._v("目录和"),e("code",[t._v(".env")]),t._v("格式的文件进行忽略，不纳入"),e("code",[t._v("git")]),t._v("管理："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516153009.png",alt:""}})])]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前的配置")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略nodemodules目录和其内文件")]),t._v("\nnodemodules/\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略.env结尾的文件格式")]),t._v("\n*.env\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h3",{attrs:{id:"多人开发-远程仓库-团队协同开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多人开发-远程仓库-团队协同开发"}},[t._v("#")]),t._v(" 多人开发 - 远程仓库，团队协同开发")]),t._v(" "),e("p",[t._v("多人开发的话，肯定是需要一个远程的版本库的，这样不同电脑上本地版本库都连接上同一个远程版本库（仓库）就可以实现代码的贡献以达到协同开发的效果：")]),t._v(" "),e("ol",[e("li",[t._v("创建一个远程版本库 - "),e("code",[t._v("git init --bare")]),t._v("，你会发现 我们在"),e("code",[t._v("remote")]),t._v("目录下执行该命令时会创建一些文件，这些文件其实在我们之前执行"),e("code",[t._v("git init")]),t._v("时是存在"),e("code",[t._v(".git")]),t._v("目录里的，这也是它和工作区的区别："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516184716.png",alt:""}})])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：这里我们在本地 "),e("code",[t._v("remote")]),t._v(" 目录里模拟创建一个 "),e("code",[t._v("远程仓库")]),t._v(" ，实际上我们一般是在 "),e("code",[t._v("github")]),t._v(" 、 "),e("code",[t._v("gitee")]),t._v(" 、 "),e("code",[t._v("gitlab")]),t._v(" 之类的远程仓库网站上创建的。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("我们之前在"),e("code",[t._v("git-demo")]),t._v("目录初始化过并且往本地仓库提交了些数据，这等于我们先有个本地仓库，想提交到远程仓库给团队一起使用，我们先尝试用"),e("code",[t._v("git push")]),t._v("往远程仓库推送本地仓库的记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516185559.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("上面你会发现，由于我们之前没有关联远程仓库，导致它不知道推送到哪去，因此提示我们关联一个远程仓库地址 - "),e("code",[t._v("git remote add origin 要关联的远程仓库地址")]),t._v("："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516185523.png",alt:""}})])])]),t._v(" "),e("blockquote",[e("p",[t._v("小技巧：将 "),e("code",[t._v("remote")]),t._v(" 文件夹直接用鼠标往 "),e("code",[t._v("git bash")]),t._v(" 上拖可快速增加该目录路径。")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[t._v("关联远程仓库后我们尝试再次推送，结果发现 我们还需要将本地分支关联对应上远程分支："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516185321.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("因此通过"),e("code",[t._v("git push --set-upstream origin master")]),t._v("推送并关联分支，发现就成功了："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516185826.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("实际情况，我们往往是先有个仓库地址，然后我们才开发的，这时候就需要"),e("code",[t._v("git clone 远程地址")]),t._v("来拉取远程的仓库记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516190457.png",alt:""}})])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意： "),e("code",[t._v("new")]),t._v(" 目录也是我们在一台电脑上模拟一个新工作区，克隆下来你会发现 "),e("code",[t._v("远程版本库目录的名字代表着项目名称")])])]),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[e("p",[t._v("克隆下来了，我们在这个新工作区提交一个记录测试不同设备之间的交互："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516190807.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("在之前工作区从远程仓库拉取记录："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516190849.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("不同电脑之间通过远程仓库同步代码的步骤完成了，但我们在实际开发过程中，往往我们提交时其他人已经往远程仓库提交过数据了，那么我们推送时会报错："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516192641.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("因此，推送到远程仓库正确的做法是：通过"),e("code",[t._v("git pull")]),t._v("先拉取最新代码，再将本地代码推送到远程仓库："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516192805.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("由于我们模拟的冲突是修改同一个文件且修改的位置相同，这导致拉取最新代码后因为修改内容冲突导致无法自动将内容合并，因此"),e("code",[t._v("new.js")]),t._v("文件产生冲突了，冲突细节如下："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516193003.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("这时需要我们手动处理冲突，因为我们这里两行代码是互不干扰的，不需要进行对比删除，都保留即可："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516193201.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("手动解决冲突后我们重新提交："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516193351.png",alt:""}})])])]),t._v(" "),e("h3",{attrs:{id:"分支相关-进阶且常用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支相关-进阶且常用"}},[t._v("#")]),t._v(" 分支相关 - 进阶且常用")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("像我们之前直接克隆的工作区，如果我们通过"),e("code",[t._v("git branch")]),t._v("查看本地全部分支，你会发现是会显示"),e("code",[t._v("master")]),t._v("分支的："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516200211.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("但所有的仓库克隆下来都是这样么？其实不然，如果我们仓库是个空仓库的话，结果会明显不同，让我们来测试下，首先新建个新的远程仓库："),e("code",[t._v("git init --bare")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("小技巧：通过 "),e("code",[t._v("&&")]),t._v(" 符号我们将几个命令写成一行依次执行 - 创建 "),e("code",[t._v("branch-remote")]),t._v(" 目录进入并初始化为远程版本库： "),e("code",[t._v("mkdir branch-remote && cd branch-remote && git init --bare")])])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[t._v("然后我们发现了，一个空仓库的话，"),e("code",[t._v("git branch")]),t._v("什么都不会显示："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516201157.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("如果我们使用"),e("code",[t._v("git status")]),t._v("的话，会发现："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516201930.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("这是因为远程仓库是一个空仓库，连"),e("code",[t._v("master")]),t._v("分支都不存在，因此我们按照提示执行"),e("code",[t._v("git branch --unset-upstream")]),t._v("即可。")])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：测试发现其实直接用 "),e("code",[t._v("git push")]),t._v(" 就能将本地 "),e("code",[t._v("master")]),t._v(" 分支推给远程仓库，并不会报错。")])]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("创建新分支的方式也很简单 - "),e("code",[t._v("git branch 新分支名字")]),t._v("："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516202116.png",alt:""}})])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：分支创建时会继承当前分支的全部信息，但是创建完毕后就是彼此独立的。")])]),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[e("p",[t._v("通过"),e("code",[t._v("git switch 分支名")]),t._v("或者"),e("code",[t._v("git checkout 分支名")]),t._v("可以切换到指定分支")])]),t._v(" "),e("li",[e("p",[t._v("通过"),e("code",[t._v("git branch -D 分支名")]),t._v("可以删除该分支："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516202301.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("由于我们还没有提交，通过"),e("code",[t._v("git branch -r")]),t._v("查看远程分支你会发现啥都么有，因此如果我们要将本地分支推送给远程该怎么做呢？其实也很简单，"),e("code",[t._v("git push")]),t._v("不行的话，按照提示执行"),e("code",[t._v("git push --set-upstream origin 分支名")]),t._v("即可："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516203104.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("这时你会发现远程也存在了本地这个分支："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516203150.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("一般当我们在某个分支做完某件事后，常常需要将那个分支的代码合并到"),e("code",[t._v("master")]),t._v("主分支上来："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516203654.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("通常来讲，我们合并后会将已经废弃的分支删除："),e("code",[t._v("git branch -D 分支名")]),t._v("，但是通过"),e("code",[t._v("git branch -r")]),t._v("你会发现远程的分支还在，这显然不是我们想要的："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516204010.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("因此，我们还需要通过"),e("code",[t._v("git push origin --delete test")]),t._v("删除远程分支："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516204121.png",alt:""}})])])]),t._v(" "),e("h3",{attrs:{id:"gitflow-git工作管理规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitflow-git工作管理规范"}},[t._v("#")]),t._v(" Gitflow - git工作管理规范")]),t._v(" "),e("p",[e("code",[t._v("Gitflow")]),t._v(" 所需的分支：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516204904.png",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("第一步")]),t._v("：创建主分支、打上版本号并创建开发分支 - "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516231349.png",alt:""}})]),t._v(" "),e("ol",[e("li",[e("p",[t._v("创建远程版本库，本地克隆远程版本库，修改一下做一次提交到远程仓库")])]),t._v(" "),e("li",[e("p",[t._v("给当前"),e("code",[t._v("commit")]),t._v("记录打上标记"),e("code",[t._v("v0.0.1")]),t._v(" - "),e("code",[t._v("git tag -a v0.0.1 -m '版本描述信息'")]),t._v(" ："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210516235747.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("通过"),e("code",[t._v("git tag")]),t._v("可以查看当前有哪些"),e("code",[t._v("tag")]),t._v("（列表）")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git show tag版本号")]),t._v("可以查看指定版本的tag的详细信息："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210517233824.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("当然打上了标签标记版本后，我们肯定是希望它能够推送到远程的，因此我们通过"),e("code",[t._v("git push origin v0.0.1")]),t._v("推送指定版本到远程仓库："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210517234113.png",alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("接着我们按照"),e("code",[t._v("Gitflow")]),t._v("工作流继续创建 开发分支"),e("code",[t._v("Develop")]),t._v("："),e("code",[t._v("git branch Develop")])])]),t._v(" "),e("li",[e("p",[t._v("切换到开发分支："),e("code",[t._v("git switch Develop")])])]),t._v(" "),e("li",[e("p",[t._v("关联本地分支与远程分支并推送："),e("code",[t._v("git push --set-upstream origin Develop")])])])]),t._v(" "),e("p",[e("strong",[t._v("第二步")]),t._v("：分配任务给对应人员，对应人员创建特性分支并开发提交，管理者代码审核并合并 - "),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210517235355.png",alt:""}})]),t._v(" "),e("ol",[e("li",[e("code",[t._v("leader")]),t._v("分配张三做登录页，分配李四做主页")]),t._v(" "),e("li",[t._v("张三拉取克隆当前分支并创建"),e("code",[t._v("feature/login")]),t._v("新特性（功能）分支："),e("code",[t._v("git clone 远程地址 && cd 仓库项目名 && git branch feature/login && git switch feature/login")])]),t._v(" "),e("li",[t._v("李四同样操作创建"),e("code",[t._v("feature/index")]),t._v("分支："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210518000100.png",alt:""}})]),t._v(" "),e("li",[t._v("张三李四都进行开发，开发完毕后，推送到自己的分支，通知"),e("code",[t._v("leader")]),t._v("进行代码审查")]),t._v(" "),e("li",[e("code",[t._v("leader")]),t._v("分别一个一个切到对应分支进行代码审核，审核通过则将该分支合并到"),e("code",[t._v("Develop")]),t._v("开发分支上")])]),t._v(" "),e("p",[e("strong",[t._v("第三步")]),t._v("：开发完成后，进入预上线阶段， "),e("code",[t._v("leader")]),t._v(" 根据当前 "),e("code",[t._v("Develop")]),t._v(" 分支创建 "),e("code",[t._v("release/版本号")]),t._v(" 分支，测试人员切到该分支测试 "),e("code",[t._v("bug")]),t._v(" ，如果发现 "),e("code",[t._v("Bug")]),t._v(" ，记录成 "),e("code",[t._v("Issue")]),t._v(" 通知对应的开发人员，开发人员根据 "),e("code",[t._v("Issue")]),t._v(" 创建对应的 "),e("code",[t._v("bugfix/issue编号")]),t._v(" ，修复完毕后开发人员切回 "),e("code",[t._v("release")]),t._v(" 分支并将修复 "),e("code",[t._v("Bug")]),t._v(" 的分支合并进来，再通知测试人员继续测试，一直到 "),e("code",[t._v("Bug")]),t._v(" 全部修复完毕， "),e("code",[t._v("leader")]),t._v(" 将当前开发分支合并到 "),e("code",[t._v("master")]),t._v(" 主分支并更新版本号："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210518000351.png",alt:""}})]),t._v(" "),e("ol",[e("li",[e("code",[t._v("leader")]),t._v("创建对应的发行分支并推送到远程版本库："),e("code",[t._v("git branch release/v0.01 && git switch release/v0.01 && git push --set-upstream origin release/v0.01")])]),t._v(" "),e("li",[t._v("测试人员切到当前发行分支进行测试，如果发现"),e("code",[t._v("Bug")]),t._v("记录复现步骤和"),e("code",[t._v("Bug")]),t._v("表现通知开发人员修复")]),t._v(" "),e("li",[t._v("开发人员根据"),e("code",[t._v("Bug")]),t._v("对应的"),e("code",[t._v("Issue")]),t._v("进行创建修复分支并修复操作："),e("code",[t._v("git pull && git switch release/v0.01 && git branch bugfix/issue01 && git switch bugfix/issue01")])]),t._v(" "),e("li",[t._v("开发人员修复完毕后，将当前修复分支合并到对应的发行版本分支并通知测试人员继续测试")]),t._v(" "),e("li",[e("code",[t._v("Bug")]),t._v("全部修复完毕后，"),e("code",[t._v("leader")]),t._v("将当前"),e("code",[t._v("发行版本")]),t._v("合并到"),e("code",[t._v("开发分支")]),t._v("，再将"),e("code",[t._v("开发分支")]),t._v("合并到"),e("code",[t._v("master")]),t._v("分支并更新新的版本号。")])]),t._v(" "),e("p",[e("strong",[t._v("第四步")]),t._v("：上线后如果遇见 "),e("code",[t._v("bug")]),t._v(" ，这时我们创建基于 "),e("code",[t._v("master")]),t._v(" 的 "),e("code",[t._v("hotfix/issue编号")]),t._v(" 紧急修复分支，开发人员切到该分支进行修复，修复后将该分支分别合并到 "),e("code",[t._v("Develop")]),t._v(" 开发分支和 "),e("code",[t._v("master")]),t._v(" 主分支， "),e("code",[t._v("leader")]),t._v(" 在 "),e("code",[t._v("master")]),t._v(" 分支上打上新的版本号并推送发布："),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Huansheng1/myimg/PicGo/20210518003050.png",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"其他文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他文章"}},[t._v("#")]),t._v(" 其他文章")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/guide/git.html"}},[t._v("git知识小课堂")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/guide/git踩到的坑.html"}},[t._v("git踩到的坑")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/guide/git进阶操作.html"}},[t._v("git进阶操作")])],1)]),t._v(" "),e("h2",{attrs:{id:"推荐链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推荐链接"}},[t._v("#")]),t._v(" 推荐链接")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://backlog.com/git-tutorial/cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("猴子都能懂的GIT入门"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - 打标签"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=i.exports}}]);